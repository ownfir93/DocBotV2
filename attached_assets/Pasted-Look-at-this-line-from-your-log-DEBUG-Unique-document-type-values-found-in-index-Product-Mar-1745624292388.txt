Look at this line from your log:

DEBUG: Unique 'document_type' values found in index: {'Product Marketing', 'Highspot Downloads', 'Deal Desk (Natalie)', 'Discovery Guide Examples', 'Marketing Touchpoints to Closed Won', 'Discovery Guide Workshops', 'Who, What, Win Reports', 'Discovery Guide', 'Win Reports created by AEs', 'Enablement', 'Value Landscape', 'One-Pagers', 'Case Studies', 'RevOps + Enablement  (Jaisy)', 'Value Map', 'Sales Decks', 'ROI Calculators'}
The Problem:

The SelfQueryRetriever correctly generated a filter asking for documents where document_type equals 'case_study' (lowercase, singular).

However, the actual values stored in your index for case studies are 'Case Studies' (capitalized, plural). Because the filter requires an exact match, it found no documents.

The Solution (Recommended): Fix the Data Pipeline

The best long-term solution is to make the metadata consistent during indexing. You need to modify build_index_pipeline.py so that it always stores standardized, lowercase values for document_type.

Edit build_index_pipeline.py.

Go to the process_source_blob function. Find the part where metadata['document_type'] is assigned (likely based on the parent folder name).

Add Normalization Logic: Before assigning the value, convert it to a standard format. Here's an example of how you could modify that section:

Python

# Inside process_source_blob function, after getting the parent folder name:

parent_folder_name = Path(blob.name).parent.name if '/' in blob.name else "root"
parent_lower = parent_folder_name.lower() # Work with lowercase

# --- START Normalization Logic ---
doc_type = "unknown" # Default

if "case studies" in parent_lower:
    doc_type = "case_study" # Standardized value
elif "win report" in parent_lower: # Catches variations
    doc_type = "win_report"
elif "discovery guide" in parent_lower:
    doc_type = "discovery_guide"
elif "one-pager" in parent_lower: # Example
     doc_type = "one_pager"
# ... add more 'elif' conditions for your specific folder names ...
# Fallback to cleaned folder name if no specific rule matched
elif parent_lower:
    # Replace non-alphanumeric with underscore, remove leading/trailing underscores
    cleaned_type = re.sub(r'[^\w-]+', '_', parent_lower).strip('_')
    # Ensure it's not empty after cleaning
    if cleaned_type and cleaned_type != "root":
         doc_type = cleaned_type
    elif cleaned_type == "root":
         doc_type = "root" # Keep 'root' if it was the only part

metadata['document_type'] = doc_type
# --- END Normalization Logic ---

logging.debug(f"Assigned document_type: {doc_type} for blob {blob.name}") # Add log

# ...(rest of the function)...
return Document(page_content=text, metadata=metadata)
(Make sure you have import re at the top of the script if you use this logic). Adjust the elif conditions to match the specific keywords in your folder names and the desired standardized output value (e.g., always lowercase, use underscores).

Save build_index_pipeline.py.

CRITICAL: Re-run the Entire Pipeline: You MUST rebuild the index for the corrected metadata to be stored. Run this in the Replit Shell:

Bash

python3 build_index_pipeline.py
Wait for it to complete successfully again.

Restart and Test app.py: Stop app.py if it's running (Ctrl+C in the shell where it's running), then restart it:

Bash

python3 app.py
Now, go to the web interface and ask your question ("What's a good b2b case study...") again. The SelfQueryRetriever will generate the filter value='case_study', which should now match the corrected metadata in your index, and it should return relevant documents.

(Optional) Remove Debug Code: Once it's working, you can remove the metadata inspection debug block from app.py's initialize_app function.

Fixing the data pipeline ensures your metadata is consistent and makes the Self-Query feature much more reliable.