nstructions for LLM Agent:

Edit app.py: Open the app.py file for editing.

Locate Insertion Point: Find the initialize_app function. Inside this function, find the line where the vector store loading is confirmed, typically after the load_vectorstore() call succeeds. It might look like this:

Python

# ... inside initialize_app() ...
    try:
        vector_store = load_vectorstore() # Downloads from GCS
        if not vector_store:
             raise RuntimeError("Failed to load vector store from GCS.")
        print(f"Vector store loaded successfully from GCS.") # Or similar log/print statement
        logging.info("Successfully loaded Chroma database from GCS download.") # Or similar log/print statement

        # <<< INSERT DEBUG CODE BLOCK HERE >>>

        # 3. Define Metadata for Self-Query (Original code continues...)
        metadata_field_info = [
# ... etc ...
Insert Debug Code: Add the following code block at the insertion point identified above:

Python

        # --- START DEBUG BLOCK: Inspect 'document_type' metadata ---
        print("DEBUG: Inspecting vector store metadata...")
        logging.info("DEBUG: Inspecting vector store metadata...") # Also log
        try:
            # Use vector_store.get() to retrieve metadata without embeddings/documents
            # May retrieve all documents if no limit specified and store is large - use limit if needed
            # Adjust limit=None if your store is very large and this takes too long
            retrieved_data = vector_store.get(include=["metadatas"], limit=None)
            metadatas_list = retrieved_data.get('metadatas', [])

            if not metadatas_list:
                print("DEBUG: No metadata found in the vector store.")
                logging.warning("DEBUG: No metadata found in the vector store.")
            else:
                print(f"DEBUG: Found {len(metadatas_list)} metadata entries. Checking 'document_type'...")
                logging.info(f"DEBUG: Found {len(metadatas_list)} metadata entries. Checking 'document_type'...")
                unique_doc_types = set()
                none_count = 0
                key_missing_count = 0

                for meta_dict in metadatas_list:
                    if meta_dict is None: # Handle case where metadata itself is None
                        none_count +=1
                        continue
                    doc_type_value = meta_dict.get('document_type') # Use .get() for safety
                    if doc_type_value is None:
                         # Check if the key was missing or the value was actually None
                         if 'document_type' not in meta_dict:
                             key_missing_count += 1
                         else:
                             none_count += 1 # Value was explicitly None
                    # Add whatever value was found (including None) to the set
                    unique_doc_types.add(doc_type_value)

                print(f"DEBUG: Unique 'document_type' values found in index: {unique_doc_types}")
                logging.info(f"DEBUG: Unique 'document_type' values found in index: {unique_doc_types}")
                if none_count > 0:
                     print(f"DEBUG: Note - {none_count} entries had 'document_type' explicitly set to None.")
                     logging.info(f"DEBUG: Note - {none_count} entries had 'document_type' explicitly set to None.")
                if key_missing_count > 0:
                     print(f"DEBUG: Note - {key_missing_count} entries were missing the 'document_type' key.")
                     logging.info(f"DEBUG: Note - {key_missing_count} entries were missing the 'document_type' key.")

        except Exception as e:
            print(f"DEBUG: Error during metadata inspection: {e}")
            logging.error(f"DEBUG: Error during metadata inspection: {e}", exc_info=True)
        print("DEBUG: Finished inspecting vector store metadata.")
        logging.info("DEBUG: Finished inspecting vector store metadata.")
        # --- END DEBUG BLOCK ---
Save app.py.